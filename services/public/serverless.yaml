# The service name should be a static string and should NOT be prefixed or suffixed with any dynamic variables, such as stage name.
service: language-assistant

# You can pin your service to only deploy with a specific Serverless version
# Check out docs.serverless.com for more details
frameworkVersion: "3"
configValidationMode: error
useDotenv: true

provider:
  name: aws
  region: ${env:AWS_REGION, env:AWS_DEFAULT_REGION, 'us-east-1'}
  stage: ${opt:stage, 'dev'}

  endpointType: REGIONAL
  # deploymentBucket:
  #   name: ${ssm:/serverless-s3-bucket}
  #   blockPublicAccess: true
  #   serverSideEncryption: aws:kms
  #   sseKMSKeyId: ${ssm:/serverless-s3-kms-key, null}
  iam:
    role:
      # Add permissions as needed.
      # Use Principal of Least Privilege https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html#grant-least-privilege
      # Keep permissions regional as much as possible https://aws.amazon.com/blogs/security/easier-way-to-control-access-to-aws-regions-using-iam-policies/
      # Example
      statements:
        - Effect: Allow
          Action:
            - logs:CreateLogStream
            - logs:PutLogEvents
          Resource:
            - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*
          Condition:
            StringEquals:
              "aws:RequestedRegion": !Ref AWS::Region
        - Effect: Allow
          Action:
            - dynamodb:PutItem
            - dynamodb:GetItem
            - dynamodb:Query
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: 
            - "Fn::GetAtt": [ VocabularyTable, Arn ]
            - "Fn::Join": [ "/", [ "Fn::GetAtt": [ VocabularyTable, Arn ], "index", "DateIndex" ] ]
            - "Fn::GetAtt": [ UserTable, Arn ]
            - "Fn::Join": [ "/", [ "Fn::GetAtt": [ UserTable, Arn ], "index", "CourseIndex" ] ]
        - Effect: Allow
          Action:
            - lambda:InvokeFunction
          Resource:
            - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:language-vocabulary
    # deploymentRole: arn:aws:iam::${aws:accountId}:role/RoleForServerlessDeploy
  tracing:
    lambda: true
    apiGateway: true # Enable AWS X-Ray Tracing on your api gateway

  # Enable REST API logs
  # This can either be set to `restApi: true` to use defaults, or configured via subproperties
  # Can only be configured if the API is created by Serverless Framework
  # logs:
  #   restApi:
  #     accessLogging: true
  #     format: '{ "requestId":"$context.requestId", "ip":"$context.identity.sourceIp", "requestTime":"$context.requestTime", "httpMethod":"$context.httpMethod", "resourcePath":"$context.resourcePath", "status":"$context.status", "responseLatency":"$context.responseLatency" }'
  #     roleManagedExternally: true

  kmsKeyArn: ${ssm:/serverless-lambda-kms-key, null}
  logRetentionInDays: 90

  # You can define service wide environment variables here
  environment:
    ENVVAR1: "env-var-1"

  # You can restrict API to only allow connection with service platform
  apiGateway:
    resourcePolicy:
      - Effect: Allow
        Principal: "*"
        Action: execute-api:Invoke
        Resource:
          - execute-api:/*/*/*

package:
  individually: true

functions:
  language-handler:
    runtime: provided.al2023
    package:
      artifact: ${env:ARTIFACT_LOC, 'func'}/language-handler.zip
    handler: bootstrap
    name: language-handler
    environment:
      CHANNEL_SECRET: ${env:CHANNEL_SECRET}
      CHANNEL_TOKEN: ${env:CHANNEL_TOKEN}
      OPENAI_BASE_URL: ${env:OPENAI_BASE_URL}
      OPENAI_API_KEY: ${env:OPENAI_API_KEY}
      VOCABULARY_TABLE_NAME: ${self:custom.vocabularyTableName}
      USER_TABLE_NAME: ${self:custom.userTableName}
    timeout: 30
    events:
      - http:
          path: /webhook/language-receiver
          method: post
    # vpc: # Enable this block if service needs to be deployed into VPC
    #   securityGroupIds:
    #   subnetIds:
  language-reminder:
    runtime: provided.al2023
    package:
      artifact: ${env:ARTIFACT_LOC, 'func'}/language-reminder.zip
    handler: bootstrap
    name: language-reminder
    environment:
      CHANNEL_SECRET: ${env:CHANNEL_SECRET}
      CHANNEL_TOKEN: ${env:CHANNEL_TOKEN}
      VOCABULARY_TABLE_NAME: ${self:custom.vocabularyTableName}
    timeout: 30
    events:
      - http:
          path: /api/language-reminder
          method: post
  language-vocabulary:
    runtime: provided.al2023
    package:
      artifact: ${env:ARTIFACT_LOC, 'func'}/language-vocabulary.zip
    handler: bootstrap
    name: language-vocabulary
    environment:
      OPENAI_BASE_URL: ${env:OPENAI_BASE_URL}
      OPENAI_API_KEY: ${env:OPENAI_API_KEY}
      USER_TABLE_NAME: ${self:custom.userTableName}
      VOCABULARY_TABLE_NAME: ${self:custom.vocabularyTableName}
      CHANNEL_TOKEN: ${env:CHANNEL_TOKEN}
      CHANNEL_SECRET: ${env:CHANNEL_SECRET}
    timeout: 60

resources:
  Resources:
    VocabularyTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.vocabularyTableName}
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
          - AttributeName: sk
            AttributeType: S
          - AttributeName: date
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
          - AttributeName: sk
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: DateIndex
            KeySchema:
              - AttributeName: date
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
    UserTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.userTableName}
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: course
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: CourseIndex
            KeySchema:
              - AttributeName: course
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
  # API domain mapping
  # - ${file(apiMapping.yaml)}
  # - ${file(apiGatewayAlarm.yaml)}

custom:
  vocabularyTableName: language-assistant-${self:provider.stage}-vocabulary
  userTableName: language-assistant-${self:provider.stage}-user
  prune:
    automatic: true
    number: 10
  alerts:
    dashboards: true
    alarms:
      - functionErrors

  # domainName: ${ssm:VCSApiDomainName, null}

plugins:
  - "@serverless/safeguards-plugin"
  - serverless-prune-plugin
  - serverless-plugin-aws-alerts

